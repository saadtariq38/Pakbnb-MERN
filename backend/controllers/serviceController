const asyncHandler = require('express-async-handler')

const Service = require('../models/serviceModel')
const User = require('../models/userModel')

//@desc Create/Set Service
//@Route  POST /api/services
//@access Private

const setService = asyncHandler(async (req, res) => {

    if(!req.body) {
        res.status(400)
        throw new Error('Please add service info');
    }

    const service = await Service.create({
        name: req.body.name,
        price: req.body.price,
        image: req.body.image,
        instructorName: req.body.instructorName,
        description: req.body.description,
        phone: req.body.phone,
        openSlots: req.body.openSlots,
        user: req.user.id
    })

    res.status(200).json(service)

    
})

//@desc Get Services belonging to the user
//@Route  GET /api/services/userService
//@access Private

const getUserServices = asyncHandler (async (req, res) => {
    const services = await Service.find({ user: req.user.id })

    res.status(200).json(services)
})

//@desc Get All Services
//@Route  GET /api/services
//@access Private

const getServices = asyncHandler (async (req, res) => {
    const services = await Service.find()

    res.status(200).json(services)
})

//@desc Update Services
//@Route  PUT /api/services/:id
//@access Private

const updateService =asyncHandler (async (req, res) => {
    const service = await Service.findById(req.params.id)

    if(!service) {
        res.status(400)
        throw new Error("Service not found");
    }

    

    //check for user
    if(!req.user) {
        res.status(401)
        throw new Error('User not found')
    }

    //make sure only logged in user matches the goal user
    if(service.user.toString() !== req.user.id) {
        res.status(401)
        throw new Error('User not authorized')
    }

    const updatedService = await Service.findByIdAndUpdate(req.params.id, req.body, {new : true,})

    res.status(200).json(updatedService)
})


//@desc Delete Services
//@Route  DELETE /api/services/:id
//@access Private

const deleteService = asyncHandler (async (req, res) => {
    const service = await Service.findById(req.params.id)

    if(!service) {
        res.status(400)
        throw new Error("Room not found");
    }


    //check for user
    if(!req.user) {
        res.status(401)
        throw new Error('User not found')
    }

    //make sure only logged in user matches the goal user
    if(service.user.toString() !== req.user.id) {
        res.status(401)
        throw new Error('User not authorized')
    }

    await service.remove()

    res.status(200).json({ id : req.params.id })
})



module.exports = {
    getServices,
    updateService,
    setService,
    deleteService,
    getUserServices
}